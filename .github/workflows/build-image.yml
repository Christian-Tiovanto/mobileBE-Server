name: Build And Push Backend Docker Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # runs only if this workflow is dispatched on 'tag', not 'branch'
      - name: Validate running ref type
        run: |
          REF_TYPE=${{ github.ref_type }}
          if [[ "$REF_TYPE" != "tag" ]]; then
            echo "Workflow is not run on tag."
            exit 1
          fi
          echo "Workflow is running of tag"

      # Extract the tag name and validate it with regex
      - name: Validate tag with regex
        run: |
          if [[ ! "$GITHUB_REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta)(\.[0-9]+)?)?$ ]]; then
            echo "Tag format is invalid. Exiting."
            exit 1
          fi

      - name: Validate Git tag matches package.json version
        id: validate_version
        run: |
          PACKAGE_VERSION=$(jq -r '.version' < package.json)
          TAG_VERSION=${GITHUB_REF_NAME#v} 
          if [[ "$PACKAGE_VERSION" != "$TAG_VERSION" ]]; then
            echo "Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)."
            exit 1
          fi
          echo "Tag version matches package.json version."

      - name: Set up Firebase service account
        run: echo "${FIREBASE_SERVICE_ACCOUNT_JSON//$'\n'/' '}" > ./cdn-db-service-account.json
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      - name: cat Firebase service account JSON secret
        run: |
          PROD_FB_SERVICE_ACCOUNT="${PROD_FB_SERVICE_ACCOUNT//$'\n'/' '}"
          echo "FIREBASE_SERVICE_ACCOUNT=${PROD_FB_SERVICE_ACCOUNT}"
        env:
          PROD_FB_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      - name: cat Firebase service account JSON file
        run: cat ./cdn-db-service-account.json

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: mobile_be
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: mobile-be-revision1.json
          task-definition-arn: arn:aws:ecs:ap-southeast-2:314146321641:task-definition/mobile-be:1
          container-name: mobile-be
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            DB_URL=mongodb+srv://mobilebe:mobilebe@cluster0.q2b3u.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
            JWT_SECRET=ultrasecret
            PORT=3006
      - name: check nama output
        run: echo ${{steps.build-image.outputs.image}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: mobile-be
          cluster: mobileBE
          wait-for-service-stability: true
